write.table(df[c(1:500), ], paste(path, file, sep=""), sep="\t", col.names=TRUE, row.names=FALSE, quote=FALSE)
# Sub-batch 2
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/metadata_for_submission_biosample_split/"
file <- paste("metadata_for_submission_biosample_batch_", 5.2, ".txt", sep="")
write.table(df[c(501:1000), ], paste(path, file, sep=""), sep="\t", col.names=TRUE, row.names=FALSE, quote=FALSE)
# Remove original file
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/metadata_for_submission_biosample_split/"
file <- paste("metadata_for_submission_biosample_batch_", 5, ".txt", sep="")
unlink(paste(path, file, sep=""))
# Load packages
library(plyr)
# Read files
# Biosample metadata
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/"
file <- "metadata_for_submission_sra.txt"
df <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
# Source metadata
path <- "/Users/seanwen/Dropbox/p53_paper_IAD/Sources/"
file <- "metadata_MPNAMLp53_with_index_genotype.txt"
df.ref <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
names(df.ref)[which(names(df.ref)=="cell_id")] <- "sample_name"
# File names
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/"
file <- "metadata_cell_ids.txt"
df.file <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
names(df.file)[which(names(df.file)=="Cell")] <- "sample_name"
# Subset relevant columns for SRA
cols <- c("sample_name")
df <- df[, cols, drop=FALSE]
# Indicate library_ID
df$library_ID <- df$sample_name
# Indicate title
df$title <- "TARGET-seq of human haematopoietic stem and progenitor cells"
# Indicate library_strategy
df$library_strategy <- "AMPLICON"
# Indicate library_source
df$library_source <- "GENOMIC SINGLE CELL"
# Indicate library_selection
df$library_selection <- "PCR"
# Indicate library_layout
df$library_layout <- "PAIRED"
# Annotate platform
names(df.ref)[which(names(df.ref)=="cDNA_sequencing")] <- "platform"
df <- join(df, df.ref[,c("sample_name", "platform")], by="sample_name", type="left")
table(df$platform)
df$platform <- "ILLUMINA"
# Indicate instrument_model ???
df$instrument_model <- "Illumina MiSeq" # As per Alba's email
# Indicate design_description
df$design_description <- "TARGET-seq (Rodriguez-Meira et al, 2019)"
# Indicate filetype
df$filetype <- "fastq"
# Indicate filename (1)
names(df.file)[which(names(df.file)=="raw_file_1")] <- "filename"
df <-  join(df, df.file[,c("sample_name", "filename")], by="sample_name", type="left")
# Indicate filename2
names(df.file)[which(names(df.file)=="raw_file_2")] <- "filename2"
df <-  join(df, df.file[,c("sample_name", "filename2")], by="sample_name", type="left")
# Save file
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/"
file <- "metadata_for_submission_sra.txt"
write.table(df, paste(path, file, sep=""), sep="\t", col.names=TRUE, row.names=FALSE, quote=FALSE)
# Read master metadata
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/"
file <- "metadata_for_submission_sra.txt"
df <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
# Check alignment with biosample metadata
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/"
file <- "metadata_for_submission_biosample.txt"
df.2 <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
table(df$sample_name==df.2$sample_name) # OK
# Split data
chunk <- 1000
n <- nrow(df)
r  <- rep(1:ceiling(n/chunk),each=chunk)[1:n]
.list <- split(df,r)
lapply(.list, dim)
# Save files
for(i in 1:length(.list)) {
# Save file
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/metadata_for_submission_sra_split/"
file <- paste("metadata_for_submission_sra_batch_", i, ".txt", sep="")
write.table(.list[[i]], paste(path, file, sep=""), sep="\t", col.names=TRUE, row.names=FALSE, quote=FALSE)
}
# Further split batch 5 (because >10GB)
# Read file
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/metadata_for_submission_sra_split/"
file <- paste("metadata_for_submission_sra_batch_", 5, ".txt", sep="")
df <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
dim(df)
# Sub-batch 1
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/metadata_for_submission_sra_split/"
file <- paste("metadata_for_submission_sra_batch_", 5.1, ".txt", sep="")
write.table(df[c(1:500), ], paste(path, file, sep=""), sep="\t", col.names=TRUE, row.names=FALSE, quote=FALSE)
# Sub-batch 2
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/metadata_for_submission_sra_split/"
file <- paste("metadata_for_submission_sra_batch_", 5.2, ".txt", sep="")
write.table(df[c(501:1000), ], paste(path, file, sep=""), sep="\t", col.names=TRUE, row.names=FALSE, quote=FALSE)
# Remove original file
path <- "/Users/seanwen/Documents/Alba/geo/genotyping/metadata/metadata_for_submission_sra_split/"
file <- paste("metadata_for_submission_sra_batch_", 5, ".txt", sep="")
unlink(paste(path, file, sep=""))
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/md5/"
file <- "md5_ccb.txt"
df.1 <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/md5/"
file <- "md5_ccb.txt"
df.1 <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
head(df.1)
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error/"
file <- "geo_duplicate_md5_flagged.txt"
df.2 <- read.table(paste(path, file, sep=""), sep="\t", header=FALSE, stringsAsFactors=FALSE)
head(df.)
head(df.1)
. <- as.data.frame(table(df.1$md5))
head(.)
. <- as.data.frame(table(df.1$md5))
. <- as.character(.[which(.$Freq >= 2), "Var1"])
length(.)
length(.)
raw_filedf.1$IsDuplicate_CCB <- ifelse(df.1$raw_file %in% ., TRUE, FALSE)
df.1$IsDuplicate_CCB <- ifelse(df.1$raw_file %in% ., TRUE, FALSE)
table(f.1$IsDuplicate_CCB)
table(df.1$IsDuplicate_CCB)
df.1$IsDuplicate_CCB <- ifelse(df.1$md5 %in% ., TRUE, FALSE)
table(df.1$IsDuplicate_CCB)
head(df.2)
. <- df.2[,1]
length(.)
function (counts, data, min.cells = 0, min.features = 0)
df.1$IsDuplicate_GEO <- ifelse(df.1$md5 %in% ., TRUE, FALSE)
table(df.1$IsDuplicate_GEO)
table(df.1$IsDuplicate_GEO)
head(df.1)
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error/"
file <- "ccb_vs_geo_duplicate_md5_flagged.txt"
write.table(df.1, paste(path, file, sep=""), sep="\t", col.names=TRUE, row.names=FALSE, quote=FALSE)
length(unique(.))
length(unique(df.1$raw_file[df.1$IsDuplicate_CCB==TRUE]))
length(unique(df.1$raw_file[df.1$IsDuplicate_GEO==TRUE]))
. <- df.2[,1]
length(.)
length(.)
. <- as.data.frame(table(df.1$md5))
. <- as.character(.[which(.$Freq >= 2), "Var1"])
length(.)
. <- as.data.frame(table(df.1$md5))
table(.$Freq)
# Read MD5 files
# CCB
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/md5/"
file <- "md5_ccb.txt"
df.1 <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
# GEO (duplicate)
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error/"
file <- "geo_duplicate_md5_flagged.txt"
df.2 <- read.table(paste(path, file, sep=""), sep="\t", header=FALSE, stringsAsFactors=FALSE)
# Annotate duplicate md5 in CCB
. <- as.data.frame(table(df.1$md5))
table(.$Freq)
. <- as.character(.[which(.$Freq >= 2), "Var1"])
df.1$IsDuplicate_CCB <- ifelse(df.1$md5 %in% ., TRUE, FALSE)
length(unique(df.1$raw_file[df.1$IsDuplicate_CCB==TRUE]))
. <- df.2[,1]
.
length(.)
length(unique(.())
length(unique(.))
df.1$IsDuplicate_GEO <- ifelse(df.1$md5 %in% ., TRUE, FALSE)
length(unique(df.1$raw_file[df.1$IsDuplicate_GEO==TRUE]))
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error/"
file <- "ccb_vs_geo_duplicate_md5_flagged.txt"
write.table(df.1, paste(path, file, sep=""), sep="\t", col.names=TRUE, row.names=FALSE, quote=FALSE)
# Read MD5 files
# CCB
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/md5/"
file <- "md5_ccb.txt"
df.1 <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
# GEO (duplicate)
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error/"
file <- "geo_duplicate_md5_flagged.txt"
df.2 <- read.table(paste(path, file, sep=""), sep="\t", header=FALSE, stringsAsFactors=FALSE)
# Read MD5 files
# CCB
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/md5/"
file <- "md5_ccb.txt"
df.1 <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
# GEO (duplicate)
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error/"
file <- "geo_duplicate_md5_flagged.txt"
df.2 <- read.table(paste(path, file, sep=""), sep="\t", header=FALSE, stringsAsFactors=FALSE)
. <- as.data.frame(table(df.1$md5))
table(.$Freq)
. <- as.character(.[which(.$Freq >= 2), "Var1"])
head(.)
df.1$IsDuplicate_CCB <- ifelse(df.1$md5 %in% ., TRUE, FALSE)
length(unique(df.1$raw_file[df.1$IsDuplicate_CCB==TRUE]))
length(unique(df.1$md5[df.1$IsDuplicate_CCB==TRUE]))
length(unique(df.1$raw_file[df.1$IsDuplicate_CCB==TRUE]))
. <- df.2[,1]
length(.)
. <- df.2[,1]
length(.)
df.1$IsDuplicate_GEO <- ifelse(df.1$md5 %in% ., TRUE, FALSE)
length(unique(df.1$raw_file[df.1$IsDuplicate_GEO==TRUE]))
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error/"
file <- "ccb_vs_geo_duplicate_md5_flagged.txt"
write.table(df.1, paste(path, file, sep=""), sep="\t", col.names=TRUE, row.names=FALSE, quote=FALSE)
length(unique(df.1$md5[df.1$IsDuplicate_GEO==TRUE]))
path <- "/Users/seanwen/Documents/Alba/data_check/01.Preprocessing/HT_transcriptome/SinglCellaR/"
file <- "Robjects/HTMPNAML_final.rdata"
object.1 <- local(get(load(file=paste(path, file, sep=""))))
md.1 <- object.1@meta.data
md.1[which(md.1$Cell %in% c("MPNAML30PL156_13D", "MPNAML30PL157_13D")),]
md.1[which(md.1$Cell %in% c("MPNAML30PL156_15C", "MPNAML30PL157_15C")),]
path <- "/Users/seanwen/Dropbox/p53_paper_IAD/01.Preprocessing/HT_transcriptome/SinglCellaR/"
file <- "Robjects/HTMPNAML_final.rdata"
object.1 <- local(get(load(file=paste(path, file, sep=""))))
md.1[which(md.1$Cell %in% c("MPNAML30PL156_13D", "MPNAML30PL157_13D")),]
md.1[which(md.1$Cell %in% c("MPNAML30PL156_15C", "MPNAML30PL157_15C")),]
# Load packages
library(gdata)
library(insect)
# Find reverse complement of i7 indices only
path <- "/Users/seanwen/Documents/Eleni/Run_Jun2022/demultiplex/bulk_rnaseq/metadata/"
file <- "SampleSheet.csv"
df <- read.xls(paste(path, file, sep=""), sheet=1, header=TRUE, stringsAsFactors=FALSE)
df <- read.table(paste(path, file, sep=""), sep=",", header=TRUE, stringsAsFactors=FALSE)
DF
df
# Find reverse complement of i7 indices only
path <- "/Users/seanwen/Documents/Eleni/Run_Jun2022/demultiplex/bulk_rnaseq/metadata/"
file <- "SampleSheet.csv"
df <- read.table(paste(path, file, sep=""), sep=",", header=TRUE, stringsAsFactors=FALSE)
df <- read.table(paste(path, file, sep=""), sep=",", header=TRUE, stringsAsFactors=FALSE, fill=TRUE)
path <- "/Users/seanwen/Documents/Eleni/Run_Jun2022/demultiplex/bulk_rnaseq/metadata/"
file <- "SampleSheet.csv"
df <- read.table(paste(path, file, sep=""), sep=",", header=TRUE, stringsAsFactors=FALSE, fill=TRUE)
paste(path, file, sep="")
df <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE, fill=TRUE)
df
df <- read.table(paste(path, file, sep=""), sep=",", header=TRUE, stringsAsFactors=FALSE, skip=15)
df
data.frame(rc(df$I7_Index_ID))
# Read original sample sheet
path <- "/Users/seanwen/Documents/Eleni/Run_Jun2022/demultiplex/bulk_rnaseq/metadata/"
file <- "SampleSheet.csv"
df <- read.table(paste(path, file, sep=""), sep=",", header=TRUE, stringsAsFactors=FALSE, skip=15)
# Find reverse complement of i7 indices only
df <- data.frame(rc(df$I7_Index_ID))
path <- "/Users/seanwen/Documents/Eleni/Run_Jun2022/demultiplex/bulk_rnaseq/metadata/"
file <- "i7_index_reverse_complete.txt"
write.table(data.frame(rc(df$I7_Index_ID)), paste(path, file, sep=""), sep="\t", col.names=FALSE, row.names=FALSE, quote=FALSE)
# Read original sample sheet
path <- "/Users/seanwen/Documents/Eleni/Run_Jun2022/demultiplex/bulk_rnaseq/metadata/"
file <- "SampleSheet.csv"
df <- read.table(paste(path, file, sep=""), sep=",", header=TRUE, stringsAsFactors=FALSE, skip=15)
# Find reverse complement of i7 indices only
path <- "/Users/seanwen/Documents/Eleni/Run_Jun2022/demultiplex/bulk_rnaseq/metadata/"
file <- "i7_index_reverse_complete.txt"
write.table(data.frame(rc(df$I7_Index_ID)), paste(path, file, sep=""), sep="\t", col.names=FALSE, row.names=FALSE, quote=FALSE)
path <- "/Users/seanwen/Documents/Eleni/Run_Jun2022/demultiplex/bulk_rnaseq/metadata/"
file <- "i5_index_reverse_complete.txt"
write.table(data.frame(rc(df$I5_Index_ID)), paste(path, file, sep=""), sep="\t", col.names=FALSE, row.names=FALSE, quote=FALSE)
data.frame(rc(df$I5_Index_ID)),
data.frame(rc(df$I5_Index_ID))
# Read original sample sheet
path <- "/Users/seanwen/Documents/Eleni/Run_Jun2022/demultiplex/bulk_rnaseq/metadata/"
file <- "SampleSheet.csv"
df <- read.table(paste(path, file, sep=""), sep=",", header=TRUE, stringsAsFactors=FALSE, skip=15)
# Find reverse complement of i7 indices only
path <- "/Users/seanwen/Documents/Eleni/Run_Jun2022/demultiplex/bulk_rnaseq/metadata/"
file <- "i7_index_reverse_complement.txt"
write.table(data.frame(rc(df$I7_Index_ID)), paste(path, file, sep=""), sep="\t", col.names=FALSE, row.names=FALSE, quote=FALSE)
# Find reverse complement of i5 indices only
path <- "/Users/seanwen/Documents/Eleni/Run_Jun2022/demultiplex/bulk_rnaseq/metadata/"
file <- "i5_index_reverse_complement.txt"
write.table(data.frame(rc(df$I5_Index_ID)), paste(path, file, sep=""), sep="\t", col.names=FALSE, row.names=FALSE, quote=FALSE)
Minibulk_RNAseq
library(SingCellaR)
sessionInfo()
# Set working directories
path.dropbox <- "/Users/seanwen/Dropbox/p53_paper_IAD/01.Preprocessing/HT_transcriptome/SinglCellaR/Robjects/"
path.local <- "/Users/seanwen/Documents/Alba/data_check/01.Preprocessing/HT_transcriptome_revised/SinglCellaR/Robjects/"
# Load packages
library(SingCellaR)
object.dropbox <- local(get(load(file=paste(path.dropbox, "HTMPNAML_final.rdata", sep=""))))
object.local <- local(get(load(file=paste(path.dropbox, "HTMPNAML_final.revised.rdata", sep=""))))
object.local <- local(get(load(file=paste(path.local, "HTMPNAML_final.revised.rdata", sep=""))))
md.dropbox <- object.1@meta.data
md.dropbox <- object.dropbox@meta.data
md.local <- object.local@meta.data
dim(md.dropbox)
dim(md.local)
19221-19383
overlaps <- intersect(md.dropbox$Cell, md.local$Cell)
length(overlaps)
md.dropbox <- md.dropbox[which(md.dropbox$Cell %in% overlaps), ]
md.local <- md.dropbox[which(md.local$Cell %in% overlaps), ]
md.dropbox <- md.dropbox[order(md.dropbox$Cell), ]
md.local <- md.local[order(md.local$Cell), ]
all.equal(md.dropbox, md.local)
head(md.dropbox)
head(md.local)
df.dropbox <- get_normalized_umi(object.dropbox)
df.local <- get_normalized_umi(object.local)
dim(df.dropbox)
dim(df.local)
overlaps <- intersect(colnames(md.dropbox), colnames(md.local))
length(overlaps)
overlaps <- intersect(colnames(df.dropbox), colnames(df.local))
length(overlaps)
all.equal(df.dropbox, df.local)
df.dropbox <- df.dropbox[,overlaps]
df.local <- df.local[,overlaps]
all.equal(df.dropbox, df.local)
dim(df.local)
df.local[1:5,1:5]
df.dropbox[1:5,1:5]
# Cell metadata
md.dropbox <- object.dropbox@meta.data
md.local <- object.local@meta.data
dim(md.dropbox)
dim(md.local)
overlaps <- intersect(md.dropbox$Cell, md.local$Cell)
length(overlaps) # 19221 cells
md.dropbox <- md.dropbox[which(md.dropbox$Cell %in% overlaps), ]
md.local <- md.dropbox[which(md.local$Cell %in% overlaps), ]
md.dropbox <- md.dropbox[order(md.dropbox$Cell), ]
md.local <- md.local[order(md.local$Cell), ]
all.equal(md.dropbox, md.local)
# Set working directories
path.dropbox <- "/Users/seanwen/Dropbox/p53_paper_IAD/01.Preprocessing/HT_transcriptome/SinglCellaR/Robjects/"
path.local <- "/Users/seanwen/Documents/Alba/data_check/01.Preprocessing/HT_transcriptome_revised/SinglCellaR/Robjects/"
# Load packages
library(SingCellaR)
# Read SingCellaR objects
object.dropbox <- local(get(load(file=paste(path.dropbox, "MF_MolCell2019.rdata", sep=""))))
object.local <- local(get(load(file=paste(path.local, "MF_MolCell2019.rdata", sep=""))))
# Cell metadata
md.dropbox <- object.dropbox@meta.data
md.local <- object.local@meta.data
dim(md.dropbox)
dim(md.local)
md.dropbox <- md.dropbox[order(md.dropbox$Cell), ]
md.local <- md.local[order(md.local$Cell), ]
all.equal(md.dropbox, md.local)
df.dropbox <- get_normalized_umi(object.dropbox)
df.local <- get_normalized_umi(object.local)
dim(df.dropbox) # 32830 genes 19383 cells
dim(df.local)
all.equal(df.dropbox, df.local)
# Set working directories
path.dropbox <- "/Users/seanwen/Dropbox/p53_paper_IAD/01.Preprocessing/HT_transcriptome/SinglCellaR/Robjects/"
path.local <- "/Users/seanwen/Documents/Alba/data_check/01.Preprocessing/HT_transcriptome_revised/SinglCellaR/Robjects/"
# Load packages
library(SingCellaR)
# Read SingCellaR objects
object.dropbox <- local(get(load(file=paste(path.dropbox, "MF_MolCell2019.rdata", sep=""))))
object.local <- local(get(load(file=paste(path.local, "MF_MolCell2019.rdata", sep=""))))
df.coord.dropbox <- get_umap.result(object.dropbox)
df.coord.local <- get_umap.result(object.local)
df.coord.dropbox <- df.coord.dropbox[order(df.coord.dropbox$Cell), ]
df.coord.local <- df.coord.local[order(df.coord.local$Cell), ]
all.equal(df.dropbox, df.local)
all.equal(df.coord.dropbox, df.coord.local)
# Alba
path <- "/Users/seanwen/Documents/Alba/data_check/01.Preprocessing/HT_transcriptome_revised/MPNAMLB3/"
file <- "MPNAMLB3_duplicates.txt"
df.1 <- read.table(paste(path, file, sep=""),header = T,sep="\t")
path <- "/Users/seanwen/Dropbox/p53_paper_IAD/01.Preprocessing/HT_transcriptome_revised/MPNAMLB3/"
file <- "MPNAMLB3_duplicates.txt"
df.1 <- read.table(paste(path, file, sep=""),header = T,sep="\t")
head(df.1)
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error"
file <- "geo_duplicate_md5_flagged.txt"
df.2 <- read.table(paste(path, file, sep=""),header = T,sep="\t")
# Alba
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error/"
file <- "geo_duplicate_md5_flagged.txt"
df.2 <- read.table(paste(path, file, sep=""),header = T,sep="\t")
dim(df.2)
head(df.2)
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error/"
file <- "ccb_vs_geo_duplicate_md5_flagged.txt.txt"
df.2 <- read.table(paste(path, file, sep=""),header = T,sep="\t")
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error/"
file <- "ccb_vs_geo_duplicate_md5_flagged.txt"
df.2 <- read.table(paste(path, file, sep=""),header = T,sep="\t")
head(df.2)
# Remove duplicates from CCB
nrow(df.1)
nrow(df.2)
head(df.2)
. <- strsplit(df.2$raw_file, split="_", fixed=TRUE)
head(.)
. <- strsplit(df.2$raw_file, split="_", fixed=TRUE)
. <- sapply(., function(x) {paste(x[1], x[2], sep="_")})
head(.)
df.2$cell_id <- .
nrow(df.1) # 192 duplicates
nrow(df.2) # 27025 this study + Mol Cell
df.2 <- df.2[-which(df.2$cell_id %in% df.1$cell_id), ]
dim(df.2)
# Read files
# Alba
path <- "/Users/seanwen/Dropbox/p53_paper_IAD/01.Preprocessing/HT_transcriptome_revised/MPNAMLB3/"
file <- "MPNAMLB3_duplicates.txt"
df.1 <- read.table(paste(path, file, sep=""),header = T,sep="\t")
# CBB
path <- "/Users/seanwen/Documents/Alba/geo/transcriptome/error/"
file <- "ccb_vs_geo_duplicate_md5_flagged.txt"
df.2 <- read.table(paste(path, file, sep=""),header = T,sep="\t")
# Retrieve cell ids
. <- strsplit(df.2$raw_file, split="_", fixed=TRUE)
. <- sapply(., function(x) {paste(x[1], x[2], sep="_")})
df.2$cell_id <- .
# Remove duplicates from CCB
nrow(df.1) # 192 duplicates
nrow(df.2) # 27025 this study + Mol Cell
length(intersect(df.1$cell_id, df.2$cell_id))
df.2 <- df.2[-which(df.2$cell_id %in% df.1$cell_id), ]
head(df.2)
length(df.2$md5)
length(unique(df.2$md5))
library(Matrix)
# Matrix
# Tutorial
path <- "/Users/seanwen/Documents/MARVEL/Tutorial/Droplet/Data/Gene_SingCellaR/"
file <- "matrix_normalised.mtx"
df.gene.norm.1 <- readMM(paste(path, file, sep=""))
# Data check
path <- "/Users/seanwen/Documents/MARVEL/Github_WIMM/data/MARVEL_input/Gene_SingCellaR/"
file <- "matrix_normalised.mtx"
df.gene.norm.2 <- readMM(paste(path, file, sep=""))
path <- "/Users/seanwen/Documents/MARVEL/Github_WIMM/Wen_NucleicAcidsRes_2023data/MARVEL_input/Gene_SingCellaR/"
file <- "matrix_normalised.mtx"
df.gene.norm.2 <- readMM(paste(path, file, sep=""))
path <- "/Users/seanwen/Documents/MARVEL/Github_WIMM/Wen_NucleicAcidsRes_2023/data/MARVEL_input/Gene_SingCellaR/"
file <- "matrix_normalised.mtx"
df.gene.norm.2 <- readMM(paste(path, file, sep=""))
dim(df.gene.norm.1)
dim(df.gene.norm.2)
path <- "/Users/seanwen/Documents/MARVEL/Tutorial/Droplet/Data/Gene_SingCellaR/"
file <- "phenoData.txt"
df.gene.norm.pheno.1 <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
path <- "/Users/seanwen/Documents/MARVEL/Github_WIMM/Wen_NucleicAcidsRes_2023/data/MARVEL_input/Gene_SingCellaR/"
file <- "phenoData.txt"
df.gene.norm.pheno.2 <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
dim(df.gene.norm.pheno.1 )
dim(df.gene.norm.pheno.2)
head(df.gene.norm.pheno.1)
table(df.gene.norm.pheno.1$donor.id)
table(df.gene.norm.pheno.2$donor.id)
# phenoData
# Tutorial
path <- "/Users/seanwen/Documents/MARVEL/Tutorial/Droplet/Data/Gene_SingCellaR/"
file <- "phenoData.txt"
df.gene.norm.pheno.1 <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
# Data check
path <- "/Users/seanwen/Documents/MARVEL/Github_WIMM/Wen_NucleicAcidsRes_2023/data/MARVEL_input/Gene_SingCellaR/"
file <- "phenoData.txt"
df.gene.norm.pheno.2 <- read.table(paste(path, file, sep=""), sep="\t", header=TRUE, stringsAsFactors=FALSE)
table(df.gene.norm.pheno.1$donor.id)
table(df.gene.norm.pheno.2$donor.id)
setwd("/Users/seanwen/Documents/MARVEL/Github_WIMM/Wen_NucleicAcidsRes_2023/scripts/scripts_01_preprocess_singcellar/")
# Load packages
library(SingCellaR)
library(data.table)
# Read SingCellaR files
sample.1 <- "SRR9008752.SingCellaR.rdata"
sample.2 <- "SRR9008753.SingCellaR.rdata"
sample.3 <- "SRR9008754.SingCellaR.rdata"
sample.4 <- "SRR9008755.SingCellaR.rdata"
object <- new("SingCellaR_Int")
object@dir_path_SingCellR_object_files <- "../../data/SingCellaR_output/individual/"
object@SingCellR_object_files=c(sample.1, sample.2, sample.3, sample.4)
preprocess_integration(object)
# Add relevant information to object
df.pheno <- get_cells_annotation(object)
filter_cells_and_genes(object,
min_UMIs=min(df.pheno$UMI_count),
max_UMIs=max(df.pheno$UMI_count),
min_detected_genes=min(df.pheno$detectedGenesPerCell),
max_detected_genes=max(df.pheno$detectedGenesPerCell),
max_percent_mito=15,
genes_with_expressing_cells=10,
isRemovedDoublets=FALSE
)
# Add Sample ID
# Retrieve metadata
df.pheno <- object@meta.data
# Annotate
df.pheno$sampleID[grep("_SRR9008752", df.pheno$Cell, fixed=TRUE)] <- "SRR9008752"
df.pheno$sampleID[grep("_SRR9008753", df.pheno$Cell, fixed=TRUE)] <- "SRR9008753"
df.pheno$sampleID[grep("_SRR9008754", df.pheno$Cell, fixed=TRUE)] <- "SRR9008754"
df.pheno$sampleID[grep("_SRR9008755", df.pheno$Cell, fixed=TRUE)] <- "SRR9008755"
table(df.pheno$sampleID)
# Save metadata
object@meta.data <- df.pheno
# Normalise counts (Checking w/ GW if this is neccessary)
normalize_UMIs(object,use.scaled.factor = T)
# Retrieve highly variable genes
get_variable_genes_by_fitting_GLM_model(object,
mean_expr_cutoff=0.1,
disp_zscore_cutoff=0.1
)
plot_variable_genes(object)
# Save integrated R object
path <- "../../data/SingCellaR_output/integrated/"
file <- "Integrated_iPSC_CardioDay2_4_10.rdata"
save(object, file=paste(path, file, sep=""))
